name: Check code base

on:
  workflow_call:

jobs:
  checks:
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'

      - name: Install algokit
        run: pipx install algokit

      - name: Start LocalNet
        run: algokit localnet start

      - name: Bootstrap dependencies
        run: algokit bootstrap all

      - name: Configure git
        shell: bash
        run: |
          # set git user and email as test invoke git
          git config --global user.email "actions@github.com" && git config --global user.name "github-actions"
{%- if use_python_pip_audit %}

      - name: Audit with pip-audit
        run: |
          # audit non dev dependencies, no exclusions
          poetry export --without=dev > requirements.txt && poetry run pip-audit -r requirements.txt

          # audit all dependencies, with exclusions.
          # If a vulnerability is found in a dev dependency without an available fix,
          # it can be temporarily ignored by adding --ignore-vuln e.g.
          # --ignore-vuln "GHSA-hcpj-qp55-gfph" # GitPython vulnerability, dev only dependency
          poetry run pip-audit
{%- endif %}
{%- if use_python_black %}

      - name: Check formatting with Black
        run: |
          # stop the build if there are files that don't meet formatting requirements
          poetry run black --check .
{%- endif %}
{%- if python_linter == 'ruff' %}

      - name: Check linting with Ruff
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run ruff .
{%- elif python_linter == 'flake8' %}

      - name: Check linting with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 .
{%- endif %}
{%- if use_python_mypy %}

      - name: Check types with mypy
        run: poetry run mypy
{%- endif %}
{%- if use_python_pytest %}

      - name: Run tests
        shell: bash
        run: |
          set -o pipefail
          poetry run pytest --junitxml=pytest-junit.xml
{%- endif %}

      - name: Build smart contracts
        run: poetry run python -m smart_contracts build

      - name: Check output stability of the smart contracts
        shell: bash
        run: |
          # Add untracked files as empty so they come up in diff
          git add -N ./smart_contracts/artifacts
          # Error out if there are any changes in teal after generating output
          git diff --exit-code --minimal ./smart_contracts/artifacts || (echo "::error ::Smart contract artifacts have changed, ensure committed artifacts are up to date" && exit 1);

      - name: Run deployer against LocalNet
{%- if deployment_language == 'typescript' %}
        run: npm run --prefix smart_contracts deploy:ci
{%- elif deployment_language == 'python' %}
        run: poetry run python -m smart_contracts deploy
{%- endif %}
