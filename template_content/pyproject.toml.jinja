[tool.poetry]
name = "{{ project_name }}"
version = "0.1.0"
description = "Algorand smart contracts"
authors = ["{{ author_name }} <{{ author_email }}>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
beaker-pyteal = "^1.0.0"
algokit-utils = "^1.3"
python-dotenv = "^1.0.0"

[tool.poetry.group.dev.dependencies]
{% if use_python_black -%}
black = {extras = ["d"], version = "*"}
{% endif -%}
{% if python_linter == 'ruff' -%}
ruff = ">=0.0.260"
{% elif python_linter == 'flake8' -%}
flake8 = "*"
{% endif -%}
{% if use_python_mypy -%}
mypy = "*"
{% endif -%}
{% if use_python_pytest -%}
pytest = "*"
pytest-cov = "*"
{% endif -%}
{% if use_python_pip_audit -%}
pip-audit = "*"
{% endif -%}
{% if use_pre_commit -%}
pre-commit = "*"
{% endif %}
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

{% if python_linter == 'ruff' -%}
[tool.ruff]
select = ["E", "F", "ANN", "UP", "N", "C4", "B", "A", "YTT", "W", "FBT", "Q", "RUF", "I"]
ignore = [
  "ANN101", # no type for self
  "ANN102", # no type for cls
]
unfixable = ["B", "RUF"]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true
suppress-none-returning = true
{% endif -%}
{% if use_python_pytest %}
[tool.pytest.ini_options]
pythonpath = ["smart_contracts", "tests"]
{% endif -%}
{% if use_python_mypy %}
[tool.mypy]
files = "smart_contracts/"
python_version = "3.10"
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
allow_untyped_defs = false
strict_equality = true
{% endif -%}
