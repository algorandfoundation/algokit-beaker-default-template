[algokit]
min_version = "v1.12.1"

[generate.smart_contract]
description = "Adds new smart contract to existing project"
path = ".algokit/generators/create_contract"

[project]
type = 'contract'
name = '{{ project_name }}'
artifacts = 'smart_contracts/artifacts'

[project.deploy]
{%- if deployment_language == 'python' %}
command = "poetry run python -m smart_contracts deploy"
{%- elif deployment_language == 'typescript' %}
command = "npm run deploy:ci"
{%- endif %}
environment_secrets = [
  "DEPLOYER_MNEMONIC",
{%- if use_dispenser %}
  "DISPENSER_MNEMONIC",
{%- endif %}
]

[project.deploy.localnet]
environment_secrets = []

[project.run]
# Commands intented for use locally and in CI
{%- if deployment_language == 'python' %}
build = { commands = [
  'poetry run python -m smart_contracts build',
], description = 'Build all smart contracts in the project' }
{%- elif deployment_language == 'typescript' %}
build = { commands = [ 
  'npm run build',
], description = 'Build all smart contracts in the project' }
{%- endif %}
{%- if deployment_language == 'python' and use_python_pytest %}
test = { commands = [
  'poetry run pytest',
], description = 'Run smart contract tests' }
{%- elif deployment_language == 'typescript' and use_typescript_jest %}
test = { commands = [
  'npm run test',
], description = 'Run smart contract tests using Jest' }
{%- endif %}
{%- if use_python_pip_audit %}
audit = { commands = [
  'poetry export --without=dev -o requirements.txt',
  'poetry run pip-audit -r requirements.txt',
], description = 'Audit with pip-audit' }
{%- endif %}
lint = { commands = [
{%- if use_python_black %}
  'poetry run black --check .',
{%- endif %}
{%- if python_linter == 'ruff' %}
  'poetry run ruff .',
{%- elif python_linter == 'flake8' %}
  'poetry run flake8 .',
{%- endif %}
{%- if use_python_mypy %}
  'poetry run mypy',
{%- endif %}
], description = 'Perform linting' }
audit-teal = { commands = [
  # ðŸš¨ IMPORTANT ðŸš¨: For strict TEAL validation, remove --exclude statements. The default starter contract is not for production. Ensure thorough testing and adherence to best practices in smart contract development. This is not a replacement for a professional audit.
  'algokit task analyze smart_contracts/artifacts --recursive --force --exclude rekey-to --exclude is-updatable --exclude missing-fee-check --exclude is-deletable --exclude can-close-asset --exclude can-close-account --exclude unprotected-deletable --exclude unprotected-updatable',
], description = 'Audit TEAL files' }

# Commands indented for CI only, prefixed with `ci-` by convention
ci-teal-diff = { commands = [
  'git add -N ./smart_contracts/artifacts',
  'git diff --exit-code --minimal ./smart_contracts/artifacts',
], description = 'Check TEAL files for differences' }
