import json
from os import makedirs
from os.path import exists

from . import BASE_DIR, CONTRACTS

print("Compiling PyTEAL...")

for contract_name, contracts in CONTRACTS.items():
    for file_name, generator in contracts.items():
        code = generator()
        if not exists(BASE_DIR / contract_name / "template"):
            makedirs(BASE_DIR / contract_name / "template")
        if isinstance(code, str):
            (BASE_DIR / contract_name / "template" / (file_name + ".teal")).write_text(code + "\n")
        elif isinstance(code, tuple):
            (BASE_DIR / contract_name / "template" / (file_name + "_approval.teal")).write_text(code[0] + "\n")
            (BASE_DIR / contract_name / "template" / (file_name + "_clear.teal")).write_text(code[1] + "\n")
            (BASE_DIR / contract_name / "template" / (file_name + ".abi.json")).write_text(
                json.dumps(code[2].dictify()) + "\n"
            )
            (BASE_DIR / contract_name / "template" / (file_name + ".abi.d.ts")).write_text(
                # Make it so the Typescript type is exported as a const so that it can be used for type inference
                # This wouldn't be needed if https://github.com/microsoft/TypeScript/issues/32063 is resolved
                "/** Generated by __main__.py */\n/* eslint-disable */\ndeclare const data: "
                # The TypeScript types don't support null so replace them with undefined
                + json.dumps(code[2].dictify()).replace("null", "undefined")
                + "\nexport = data\n"
            )
        else:
            (BASE_DIR / contract_name / "template" / (file_name + "_approval.teal")).write_text(
                code.approval_program + "\n"
            )
            (BASE_DIR / contract_name / "template" / (file_name + "_clear.teal")).write_text(code.clear_program + "\n")
            (BASE_DIR / contract_name / "template" / (file_name + ".abi.json")).write_text(
                json.dumps(code.contract.dictify()) + "\n"
            )
            (BASE_DIR / contract_name / "template" / (file_name + ".abi.d.ts")).write_text(
                # Make it so the Typescript type is exported as a const so that it can be used for type inference
                # This wouldn't be needed if https://github.com/microsoft/TypeScript/issues/32063 is resolved
                "/** Generated by __main__.py */\n/* eslint-disable */\ndeclare const data: "
                # The TypeScript types don't support null so replace them with undefined
                + json.dumps(code.contract.dictify()).replace("null", "undefined")
                + "\nexport = data\n"
            )
        print("Compiled " + contract_name + " (" + file_name + ")...")
