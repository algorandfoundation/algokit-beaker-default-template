_subdirectory: template_content
_templates_suffix: ".jinja"

use_workspace:
  type: bool
  when: false # never prompted to user explicitly, instead expect cli to auto fill (supported cli versions > v1.13.x)
  help: Automatically filled by AlgoKit CLI (>1.13.x) - passes the --workspace/--no-workspace flag's value, can be used to reason whether this template is currently being instantiated as part of a workspace or not.
  default: no

# questions
project_name:
  type: str
  help: Name for this project.
  placeholder: "algorand-app"

author_name:
  type: str
  help: Package author name
  placeholder: "Your Name"
  default: "Your Name"

author_email:
  type: str
  help: Package author email
  placeholder: "your@email.tld"
  default: "your@email.tld"

contract_name:
  type: str
  help: Name of the default smart contract app.
  placeholder: "hello_world"
  default: "hello_world"
  validator: >-
    {% if not (contract_name | regex_search('^[a-z]+(?:_[a-z]+)*$')) %}
    contract_name must be formatted in snake case.
    {% endif %}

preset_name:
  type: str
  help: Name of the template preset to use.
  choices:
    "Starter - for a simpler starting point ideal for prototyping": "starter"
    "Production - for confidently deploying to MainNet and/or more complex projects": "production"
    "Custom - for tailoring the template output to your needs": "custom"
  default: "starter"

deployment_language:
  type: str
  help: What programming language do you want to use for your contract deployment code?
  choices:
    Python: "python"
    TypeScript: "typescript"
  default: "python"

ide_vscode:
  type: bool
  help: Do you want to add VSCode configuration?
  when: "{{ preset_name == 'custom' }}"
  default: yes

ide_jetbrains:
  type: bool
  help: Do you want to add JetBrains configuration (primarily optimized for PyCharm CE)?
  when: "{{ preset_name == 'custom' }}"
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

use_python_pytest:
  type: bool
  when: "{{ deployment_language == 'python' and preset_name == 'custom' }}"
  help: Do you want to include unit tests (via pytest)?
  default: "{{ 'yes' if preset_name == 'production' and deployment_language == 'python' else 'no' }}"

use_typescript_jest:
  type: bool
  when: "{{ deployment_language == 'typescript' and preset_name == 'custom' }}"
  help: Do you want to include unit tests (via jest)?
  default: "{{ 'yes' if preset_name == 'production' and deployment_language == 'typescript' else 'no' }}"

python_linter:
  type: str
  help: Do you want to use a Python linter?
  when: "{{ preset_name == 'custom' }}"
  choices:
    Ruff: "ruff"
    Flake8: "flake8"
    No thanks: "none"
  default: "{{ 'ruff' if preset_name == 'production' else 'none' }}"

use_python_black:
  type: bool
  help: Do you want to use a Python formatter (via Black)?
  when: "{{ preset_name == 'custom' }}"
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

use_python_mypy:
  type: bool
  when: "{{ preset_name == 'custom' }}"
  help: Do you want to use a Python type checker (via mypy)?
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

use_python_pip_audit:
  type: bool
  when: "{{ preset_name == 'custom' }}"
  help: Do you want to include Python dependency vulnerability scanning (via pip-audit)?
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

use_github_actions:
  type: bool
  when: "{{ preset_name == 'custom' }}"
  help: Do you want to include Github Actions workflows for build and testnet deployment?
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

use_pre_commit:
  type: bool
  when: "{{ preset_name == 'custom' }}"
  help: Do you want to include pre-commit for linting, type checking and formatting?
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

use_dispenser:
  type: bool
  when: "{{ preset_name == 'custom' }}"
  help: Do you want to fund your deployment account using an optional dispenser account?
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"
